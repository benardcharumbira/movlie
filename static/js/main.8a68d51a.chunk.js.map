{"version":3,"sources":["api/index.js","Components/Form/Form.js","Components/MovieList/MovieList.js","App.js","Components/MovieDetails/MovieDetails.js","Router/Router.js","serviceWorker.js","index.js"],"names":["fetchData","movieName","fetch","then","resp","json","form","props","className","onSubmit","getMovie","type","name","movieList","style","width","display","movies","map","value","key","imdbID","marginBottom","src","Poster","alt","Title","Year","to","pathname","movieId","App","state","data","componentDidMount","a","response","setState","Search","event","preventDefault","target","elements","this","React","Component","MovieDetails","useState","activeMovie","setActiveMovie","getData","id","location","console","log","req","useEffect","Released","Director","Actors","Awards","Plot","Rated","Genre","Router","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wWACaA,G,YAAY,SAACC,GAMxB,OALaC,MAAM,6BAAD,OACaD,EADb,mBAFL,aAIXE,MAAK,SAACC,GACN,OAAOA,EAAKC,YCcDC,G,MAfF,SAACC,GACZ,OACE,yBAAKC,UAAU,cACb,0BAAMA,UAAU,cAAcC,SAAUF,EAAMG,UAC5C,2BACEF,UAAU,wBACVG,KAAK,OACLC,KAAK,cAEP,4BAAQJ,UAAU,qBAAlB,cCiCOK,G,MA1CG,SAACN,GACjB,IAAMO,EAAQ,CACZC,MAAO,QACPC,QAAS,QAGX,OACE,yBAAKR,UAAU,aACb,yBAAKA,UAAU,OACZD,EAAMU,OAAOC,KAAI,SAACC,GAAD,OAChB,yBAAKC,IAAKD,EAAME,OAAQb,UAAU,YAChC,yBAAKA,UAAU,cAAcM,MAAO,CAAEQ,aAAc,SAClD,yBAAKd,UAAU,QAAQM,MAAOA,GAC5B,yBACES,IAAKJ,EAAMK,OACXhB,UAAU,eACViB,IAAI,QAEN,yBAAKjB,UAAU,aACb,wBAAIA,UAAU,cAAcW,EAAMO,OAClC,uBAAGlB,UAAU,aAAb,SAAgCW,EAAMQ,MACtC,4BAAQnB,UAAU,mBAChB,kBAAC,IAAD,CACEoB,GAAI,CACFC,SAAS,iBAAD,OAAmBV,EAAME,QACjCS,QAASX,EAAME,QAEjBb,UAAU,iBALZ,oBCoBLuB,E,4MAtCbC,MAAQ,CACNC,KAAM,I,EAGRC,kB,sBAAoB,4BAAAC,EAAA,sEACKnC,EAAU,YADf,OACZoC,EADY,OAElB,EAAKC,SAAS,CACZJ,KAAMG,EAASE,SAHC,2C,EAOpB5B,S,uCAAW,WAAO6B,GAAP,iBAAAJ,EAAA,6DACTI,EAAMC,iBACAvC,EAAYsC,EAAME,OAAOC,SAASzC,UAAUkB,MAFzC,SAIcnB,EAAUC,GAJxB,OAIHmC,EAJG,OAMT,EAAKC,SAAS,CACZJ,KAAMG,EAASE,SAPR,2C,6GAYT,OACE,yBAAK9B,UAAU,OACb,4CACA,kBAAC,EAAD,CAAME,SAAUiC,KAAKjC,WAEpBiC,KAAKX,MAAMC,KACV,kBAAC,EAAD,CAAWhB,OAAQ0B,KAAKX,MAAMC,OAE9B,+C,GAhCQW,IAAMC,W,QCiDTC,G,MAnDM,SAACvC,GAAW,IAAD,EACQwC,mBAAS,IADjB,mBACvBC,EADuB,KACVC,EADU,KAGxBC,EAAO,uCAAG,8BAAAf,EAAA,6DACRgB,EAAK5C,EAAM6C,SAAStB,QAC1BuB,QAAQC,IAAI,KAAMH,GAFJ,SAGIjD,MAAM,6BAAD,OACQiD,EADR,mBARZ,aAUThD,MAAK,SAACC,GACN,OAAOA,EAAKC,UANA,OAGRkD,EAHQ,OASdN,EAAeM,GATD,2CAAH,qDAgBb,OAJAC,qBAAU,WACRN,MACC,IAGD,yBAAK1C,UAAU,aACZwC,EACC,6BACE,6CACA,yBAAKxC,UAAU,WACb,yBAAKA,UAAU,eACb,yBACEe,IAAKyB,EAAYxB,OACjBhB,UAAU,eACViB,IAAI,SAGR,yBAAKjB,UAAU,gBACb,wBAAIA,UAAU,SAASwC,EAAYtB,OACnC,uBAAGlB,UAAU,YAAb,aAAmCwC,EAAYS,UAC/C,uBAAGjD,UAAU,YAAb,aAAmCwC,EAAYU,UAC/C,uBAAGlD,UAAU,UAAb,WAA+BwC,EAAYW,QAC3C,uBAAGnD,UAAU,UAAb,WAA+BwC,EAAYY,QAC3C,uBAAGpD,UAAU,QAAb,SAA2BwC,EAAYa,MACvC,uBAAGrD,UAAU,WAAb,UAA+BwC,EAAYc,OAC3C,uBAAGtD,UAAU,SAAb,UAA6BwC,EAAYe,UAK/C,6CCpCOC,EATA,WACb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWnC,EAAKoC,OAAK,IACrC,kBAAC,IAAD,CAAOF,KAAK,oBAAoBC,UAAWpB,MCG7BsB,QACW,cAA7BC,OAAOjB,SAASkB,UAEe,UAA7BD,OAAOjB,SAASkB,UAEhBD,OAAOjB,SAASkB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MADF,KAGAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5E,MAAK,SAAA6E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.8a68d51a.chunk.js","sourcesContent":["const apiKey = \"e7799b7a\";\r\nexport const fetchData = (movieName) => {\r\n  const data = fetch(\r\n    `http://www.omdbapi.com/?s=${movieName}&apikey=${apiKey}`\r\n  ).then((resp) => {\r\n    return resp.json();\r\n  });\r\n  return data;\r\n};\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./Form.css\";\r\n\r\nconst form = (props) => {\r\n  return (\r\n    <div className=\"searchForm\">\r\n      <form className=\"form-inline\" onSubmit={props.getMovie}>\r\n        <input\r\n          className=\"form-control col-md-8\"\r\n          type=\"text\"\r\n          name=\"movieName\"\r\n        ></input>\r\n        <button className=\"btn btn-info ml-2\">Search</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default form;\r\n","import React from \"react\";\r\nimport \"./MovieList.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst movieList = (props) => {\r\n  const style = {\r\n    width: \"15rem\",\r\n    display: \"flex\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        {props.movies.map((value) => (\r\n          <div key={value.imdbID} className=\"col-md-4\">\r\n            <div className=\"cardStyling\" style={{ marginBottom: \"2rem\" }}>\r\n              <div className=\"card \" style={style}>\r\n                <img\r\n                  src={value.Poster}\r\n                  className=\"card-img-top\"\r\n                  alt=\"...\"\r\n                ></img>\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\">{value.Title}</h5>\r\n                  <p className=\"card-text\">Year: {value.Year}</p>\r\n                  <button className=\"btn btn-primary\">\r\n                    <Link\r\n                      to={{\r\n                        pathname: `/movieDetails/${value.imdbID}`,\r\n                        movieId: value.imdbID,\r\n                      }}\r\n                      className=\"viewMovieLink\"\r\n                    >\r\n                      View\r\n                    </Link>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default movieList;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { fetchData } from \"./api/index\";\r\nimport Form from \"../src/Components/Form/Form\";\r\nimport MovieList from \"./Components/MovieList/MovieList\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: [],\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    const response = await fetchData(\"Avengers\");\r\n    this.setState({\r\n      data: response.Search,\r\n    });\r\n  };\r\n\r\n  getMovie = async (event) => {\r\n    event.preventDefault();\r\n    const movieName = event.target.elements.movieName.value;\r\n\r\n    const response = await fetchData(movieName);\r\n\r\n    this.setState({\r\n      data: response.Search,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Movie Search</h1>\r\n        <Form getMovie={this.getMovie} />\r\n\r\n        {this.state.data ? (\r\n          <MovieList movies={this.state.data} />\r\n        ) : (\r\n          <h3>Loading...</h3>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./MovieDetails.css\";\r\n\r\nconst apiKey = \"e7799b7a\";\r\n\r\nconst MovieDetails = (props) => {\r\n  const [activeMovie, setActiveMovie] = useState({});\r\n\r\n  const getData = async () => {\r\n    const id = props.location.movieId;\r\n    console.log(\"id\", id);\r\n    const req = await fetch(\r\n      `http://www.omdbapi.com/?i=${id}&apikey=${apiKey}`\r\n    ).then((resp) => {\r\n      return resp.json();\r\n    });\r\n\r\n    setActiveMovie(req);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {activeMovie ? (\r\n        <div>\r\n          <h1>Movie Details</h1>\r\n          <div className=\"content\">\r\n            <div className=\"leftContent\">\r\n              <img\r\n                src={activeMovie.Poster}\r\n                className=\"card-img-top\"\r\n                alt=\"...\"\r\n              />\r\n            </div>\r\n            <div className=\"rightContent\">\r\n              <h5 className=\"title\">{activeMovie.Title}</h5>\r\n              <p className=\"released\">Released: {activeMovie.Released}</p>\r\n              <p className=\"director\">Director: {activeMovie.Director}</p>\r\n              <p className=\"actors\">Actors: {activeMovie.Actors}</p>\r\n              <p className=\"awards\">Awards: {activeMovie.Awards}</p>\r\n              <p className=\"plot\">Plot: {activeMovie.Plot}</p>\r\n              <p className=\"ratings\">Rated: {activeMovie.Rated}</p>\r\n              <p className=\"genre\">Genre: {activeMovie.Genre}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h4>Loading...</h4>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieDetails;\r\n","import { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport App from \"../App\";\r\nimport MovieDetails from \"../Components/MovieDetails/MovieDetails\";\r\nimport React from \"react\";\r\n\r\nconst Router = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Route path=\"/\" component={App} exact />\r\n      <Route path=\"/movieDetails/:id\" component={MovieDetails} />\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Router from \"./Router/Router\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router />,\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}